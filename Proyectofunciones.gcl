proc abandonar(in irse: bool;in-out jugando: bool)
{Pre True}
{Post irse=>jugando=False /\ not irse=>jugando=True}
	#este procedimiento toma la decision del usuario, reflejada en la constante irse
	#y modifica el valor de jugando para terminar o continuar la partida
[
	if irse->
		jugando:=False;
	[] not irse->
		skip;
	fi
]

proc terminar(in terminar: bool; out dentro: bool)
{Pre True}
{Post terminar=>dentro=False /\ not terminar=>dentro=True}
	#este procedimiento toma la decision del usuario, reflejada en la constante terminar
	#y modifica el valor de dentro para salirse o no del programa 

	if terminar->
		dentro:=False;
	[] not terminar->
		skip;
	fi
]


proc fumado(IA2)(in-out A: array [0..6)x[0..7) of int)
{Pre}
{Post}
[
	VAR:
	P: array [0..7)x[0..7) of int;
	J: array [0..7)x[0..3) of int;
	x,y: int;
	max:int;
	hi,hd,vi,vd,dp,dpi,dsi,dsp: int;



	hi,hd,vi,vs,dp,dpi,dsi,dsp:=0,0,0,0,0,0,0,0;
	i,j,x,y:=5,6,-1,-1;
	{bound i}
	do 0 <= i < 6 /\ x=-1 /\ y=-1 ->
		{bound j}
		do  0 <= j < 7 /\ x=-1 /\ y=-1 ->
			if valida(i,j) ->
				x,y := i,j;
			[] !valida(i,j) ->
				skip
			fi
			j:=j-1
		od
			i:=i-1
	od
	i:=1;	
	do i<4-> 	
		if valida(x+i,y+i)->
			dps:= dps+1;
		[] not valida(x+i,y+i)->
			skip;
		fi
		i:=i+1;
	od

	i:=1;
	do i<4-> 	
		if valida(x-i,y-i)->
			dpi:= dpi+1;
		[] not valida(x-i,y-i)->
			skip;
		fi
		i:=i+1;
	od
	
	i:=1
	do i<4-> 	
		if valida(x,y+i)->
			hd:= hd+1;
		[] not valida(x,y+i)->
			skip;
		fi
		i:=i+1;
	od
	
	i:=1
	do i<4-> 	
		if valida(x,y-i)->
			hi:= hi+1;
		[] not valida(x,y-i)->
			skip;
		fi
		i:=i+1;
	od

	i:=1
	do i<4-> 	
		if valida(x+i,y)->
			vs:= vs+1;
		[] not valida(x+i,y)->
			skip;
		fi
		i:=i+1;
	od

	
	i:=1
	do i<4-> 	
		if valida(x-i,y)->
			vi:= vi+1;
		[] not valida(x-i,y)->
			skip;
		fi
		i:=i+1;
	od

	
	i:=1
	do i<4-> 	
		if valida(x-i,y+i)->
			dss:= dss+1;
		[] not valida(x-i,y+1)->
			skip;
		fi
		i:=i+1;
	od

	i:=1
	do i<4-> 	
		if valida(x+i,y-i)->
			dsi:= dsi+1;
		[] not valida(x+i,y-1)->
			skip;
		fi
		i:=i+1;
	od

	max:=max(hi,hd,vi,vs,dp,dpi,dsi,dsp)
		if max=0->
			i,j:=5,6;
			{bound i}
			do 0 <= i < 6->
			{bound j}
				do  0 <= j < 7 ->
					if valida(i,j) ->
						A[i][j]:=2;
					[] !valida(i,j) ->
						skip
					fi
					j:=j-1
				od
				i:=i-1
			od
			
		[] max=hi->
			A[x][y-1]:=2;
			
		[] max=hd->
			A[x][y+1]:=2;
		[]
		[]
		[]
		[]
		[]
		[]
		fi

	
	
	
	

	
	







