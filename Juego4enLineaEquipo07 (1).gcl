#
# Juego4enLineaEquipo07.gcl
#
# DESCRIPCION: algoritmo que permite a un usuario jugar al 4 en linea \
# contra una IA con 2 niveles de dificultad (facil y medio), a traves de la \
# terminal de la interfaz grafica.
#
# Autores: 
#	Br. Jose Barrera y Alfredo Cruz.
#
# Ultima modificacion: 16/03/2018.

[
   VAR
	A : array [0..6)x[0..7) of int;
	jugando : int;
	turno : int;
	jugador : int;
	juega : int;
	ganador : int;
	 
   { %forall i,j: 0<=i<6 /\ 0<=j<7: S[i][j]=0 /\ (nivel=1 \/ nivel=2)}

	jugando,turno,ganador,juega:=1,1,0,3
	{bound jugando?}
	do jugando=1 ->
		if turno = 42 ->
			jugando:=0
		[] turno < 42 ->
			if juega mod 2 != 0 ->
				juega1;
			[] juega mod 2 = 0 ->
				juega2;
			turno := turno+1
			juega := juega+1
			fi
		fi
	od

	if ganador = 0 ->
		juega := 2 
	[] ganador = 1 ->
		juega := 3
	[] ganador = 2 ->
		juega := 2


	  
   { (%forall i: 0<=i<|S| /\ (i mod 2 = 0): 
        esprimo(S[i]) /\ (S[i] < M) /\ (N mod (%pi: 0<=i<S[i+1] : S[i]) = 0) /\ S[i+1] = cuantoDivide(S[i],N)) }
]

func jugada1( A : array [0..6)x[0..7), i : int , j : int) -> A : array [0..6)x[0..7)
{ Pre: True }
{ Post:  (valida(i,j)=1 => A[i][j] = 1]) /\ (valida(i,j)=0 => A[i][j] = 0) }
[
	VAR
		ganador : int;
		jugando : int;

		ganador := 0;
		jugando := 0;

		if valida(i,j) ->
			A[i][j] := 1
		[] valida(i,j) ->
			skip
		[] i = 9 /\ j = 9 ->
			jugando := 0;
			ganador := 2;
	>> A,ganador,jugando


func jugada2( A : array [0..6)x[0..7), nivel : int ) -> A : array [0..6)x[0..7)
{ Pre: nivel = 2 \/ nivel = 1 }
{ Post:  (valida(i,j) => A[i][j] = 2]) /\ (valida(i,j) => A[i][j] = 0) }
[
	VAR

	if nivel = 2 ->
		
			
			
		

	[] nivel = 1 ->
		i,j:=5,6
		{bound i}
		do 0 <= i < 6 ->
			{bound j}
			do  0 <= j < 7 ->
				if valida(i,j) ->
					A[i][j] := 2
				[] !valida(i,j) ->
					skip
				fi
				j:=j-1
			od
			i:=i-1
		od
	fi





func valida( A : array [0..6)x[0..7), i : int , j : int ) -> bool
{ Pre: 0 <= i < 6 /\ 0 <= j < 7 }
{ Post:  (valida=0 /\ jugando=1) \/ (valida=1) }
[
	VAR
		valida : bool;
		
		if A[i][j]=0 ->
			if i=5 ->
				valida:=True;
			[] i<5 /\ A[i-1][j]!=0 ->
				valida:=True;
			[] i<5 /\ A[i-1][j]=0 ->
				valida:=False;
			fi
		[] A[i][j]!=0 ->
			valida:=False;
		fi

	>> valida
]
		

proc victoriadiagonalprincipal(in A : array [0..6)x[0..7); out ganador:int; out jugando:bool )
{ Pre: N = 6 /\ M = 7  }
{ Post:  (ganador=0 /\ jugando=1) \/ ((ganador=1 \/ ganador=2)/\(jugando=0)) }
[
	VAR
    	ganador : int;
		jugando : int;
		i : int;
		j : int;

	jugando := 1;

	i:=0;
	{bound 6-i}
	do i < 3 ->
		j:=0;
		{bound 4-j}
		do j < 4 /\ jugando=1 ->
			#Conexion diagonal principal
			if A[i][j]=A[i+1][j+1]=A[i+2][j+2]=A[i+3][j+3]=1 ->
				ganador:=1;
				jugando:=0;
				A[i][j],A[i+1][j+1],A[i+2][j+2],A[i+3][j+3]:=3,3,3,3;
			
			[] A[i][j]=A[i+1][j+1]=A[i+2][j+2]=A[i+3][j+3]=2 ->
				ganador:=2;
				jugando:=0;
				A[i][j],A[i+1][j+1],A[i+2][j+2],A[i+3][j+3]:=3,3,3,3;

			
			fi
			j:=j+1;
		od;
		i:=i+1;
	od;
	]
proc victoriahorizontal (in A : array [0..6)x[0..7); out ganador:int; out jugando:bool )
{ Pre: N = 6 /\ M = 7  }
{ Post:  (ganador=0 /\ jugando=1) \/ ((ganador=1 \/ ganador=2)/\(jugando=0)) }
[
	VAR
    	ganador : int;
		jugando : int;
		i : int;
		j : int;

	jugando := 1;

	i:=0;
	{bound 6-i}
	do i<6->
		j:=0;
		{bound 4-j}
		do j<4 and jugando=1->
			#Conexion horizontal
			[] A[i][j]=A[i][j+1]=A[i][j+2]=A[i][j+3]=1 ->
				ganador:=1;
				jugando:=0;
				A[i][j],A[i+1][j+1],A[i+2][j+2],A[i+3][j+3]:=3,3,3,3;

			[] A[i][j]=A[i][j+1]=A[i][j+2]=A[i][j+3]=2 ->
				ganador:=2;
				jugando:=0;
				A[i][j],A[i+1][j+1],A[i+2][j+2],A[i+3][j+3]:=3,3,3,3;
			fi
			j:=j+1;
		od
		i:=i+1;
	od
]

proc victoriavertical(in A : array [0..6)x[0..7); out ganador:int; out jugando:bool )
{ Pre: N = 6 /\ M = 7  }
{ Post:  (ganador=0 /\ jugando=1) \/ ((ganador=1 \/ ganador=2)/\(jugando=0)) }
[
	VAR
    	ganador : int;
		jugando : int;
		i : int;
		j : int;

	jugando := 1;

	i:=0;
	{bound 3-i}
	do i < 3 ->
		j:=0;
		{bound 7-j}
		do j < 7 /\ jugando=1 ->
			if A[i][j]=A[i+1][j]=A[i+2][j]=A[i+3][j]=1 ->
				ganador:=1;
				jugando:=0;
				A[i][j],A[i+1][j+1],A[i+2][j+2],A[i+3][j+3]:=3,3,3,3;
			[] A[i][j]=A[i+1][j]=A[i+2][j]=A[i+3][j]=2:
				ganador:=2;
				jugando:=0;
				A[i][j],A[i+1][j+1],A[i+2][j+2],A[i+3][j+3]:=3,3,3,3;
			fi;
			j:=j+1;
		od
		i:=i+1;
	od
]
proc victoriadiagonalsecundaria(in A : array [0..6)x[0..7); out ganador:int; out jugando:bool )
{ Pre: N = 6 /\ M = 7  }
{ Post:  (ganador=0 /\ jugando=1) \/ ((ganador=1 \/ ganador=2)/\(jugando=0)) }
[
	VAR
    	ganador : int;
		jugando : int;
		i : int;
		j : int;

	jugando := 1;

	i:=0:
	{bound 3-i}
	do i < 3 ->
		j:=0;
		{bound 7-j}
		do j < 7 /\ jugando=1 ->
			#Conexion diagonal secundaria
			if j>2 /\ A[i][j]=A[i+1][j-1]=A[i+2][j-2]=A[i+3][j-3]=1 ->
				ganador:=1;
				jugando:=0;
				A[i][j],A[i+1][j+1],A[i+2][j+2],A[i+3][j+3]:=3,3,3,3;

			[] j>2 /\ A[i][j]=A[i+1][j-1]=A[i+2][j-2]=A[i+3][j-3]=2 ->
				ganador:=2;
				jugando:=0;
				A[i][j],A[i+1][j+1],A[i+2][j+2],A[i+3][j+3]:=3,3,3,3;

			fi;
			j:=j+1
		od;
		i:=i+1;
	od
]

proc Inicio(in A: array [0..6)x[0..7) of int; out A: array [0..6)x[0..7) of int)
[
   	VAR:
	A : array [0..6)x[0..7) of int;
	#nombreusuario:"Coloque su nombre,por favor:");
	i:=0;
	{bound 6-i}
	do i<6->
		j:=0;
		{bound 7-j}
		do j<7->
			A[i][j]:=0;
			j:=j+1;
		od
		i:=i+1;
	od

proc otrapartida(in jugando:int; out jugardenuevo: bool)
[
	CONST:
	jugando:int;

	Var:
	jugardenuevo:bool;
	#EL usuario puede elegir si quiere jugar otra vez cuando jugando=0, pero como en GCL no se le pide informacion al usuario, entonces 
        #jugardenuevo puede tomar los dos valores 
	if jugando=0->
		jugardenuevo:=True;
	[] jugando=0->
		jugardenuevo:=False;
	fi
		
		


]
proc resultados(in ganador:int; out G: array [0..2) of int) 
{Pre: ganador==0 \/ ganador==1 \/ ganador==2}
{Post:}
[
	VAR:
	ganador:int;
	G: array [0..2) of int;
	i:int;
	suma:int;
	jugando:int;

	i,suma,jugando:=0,0,1;
	{bound }
	do jugando=1->
		if ganador=0->
			G[0]:=suma+1;
			suma:=G[0];
		[] ganador=1->
			G[1]:=suma+1;
			suma:=G[1];
		[] ganador=2->
			G[2]:=suma+1;
			suma:=G[2];
		fi
]








